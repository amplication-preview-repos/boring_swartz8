datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Admin {
  adminRole String?
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Profile {
  createdAt        DateTime  @default(now())
  id               String    @id @default(cuid())
  upcomingRenewals DateTime?
  updatedAt        DateTime  @updatedAt
  user             User?     @relation(fields: [userId], references: [id])
  userId           String?
}

model Tool {
  authorizationDetails  String?
  category              EnumToolCategory?
  createdAt             DateTime          @default(now())
  description           String?
  features              String?
  id                    String            @id @default(cuid())
  monthlyPaymentDetails Int?
  name                  String?
  pictures              Json?
  promotions            Promotion[]
  ratings               Rating[]
  transactions          Transaction[]
  updatedAt             DateTime          @updatedAt
  yearlyPaymentDetails  Int?
}

model Transaction {
  amount          Float?
  createdAt       DateTime  @default(now())
  id              String    @id @default(cuid())
  paymentMethod   String?
  tool            Tool?     @relation(fields: [toolId], references: [id])
  toolId          String?
  transactionDate DateTime?
  updatedAt       DateTime  @updatedAt
  user            User?     @relation(fields: [userId], references: [id])
  userId          String?
}

model Rating {
  createdAt   DateTime @default(now())
  id          String   @id @default(cuid())
  ratingValue Int?
  review      String?
  tool        Tool?    @relation(fields: [toolId], references: [id])
  toolId      String?
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model Notification {
  content          String?
  createdAt        DateTime                          @default(now())
  id               String                            @id @default(cuid())
  isRead           Boolean?
  notificationType EnumNotificationNotificationType?
  updatedAt        DateTime                          @updatedAt
  user             User?                             @relation(fields: [userId], references: [id])
  userId           String?
}

model Promotion {
  createdAt      DateTime  @default(now())
  id             String    @id @default(cuid())
  paymentAmount  Float?
  promotionEnd   DateTime?
  promotionStart DateTime?
  tool           Tool?     @relation(fields: [toolId], references: [id])
  toolId         String?
  updatedAt      DateTime  @updatedAt
  user           User?     @relation(fields: [userId], references: [id])
  userId         String?
}

model User {
  admins        Admin[]
  createdAt     DateTime       @default(now())
  email         String?        @unique
  firstName     String?
  id            String         @id @default(cuid())
  lastName      String?
  notifications Notification[]
  password      String
  phoneNumber   String?
  profileImage  Json?
  profiles      Profile[]
  promotions    Promotion[]
  ratings       Rating[]
  roles         Json
  transactions  Transaction[]
  updatedAt     DateTime       @updatedAt
  username      String         @unique
}

enum EnumToolCategory {
  Option1
}

enum EnumNotificationNotificationType {
  Option1
}
